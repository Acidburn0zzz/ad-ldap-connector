{
  "name": "wsfed",
  "version": "0.2.6",
  "description": "WSFed server middleware",
  "main": "lib/index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/auth0/node-wsfed.git"
  },
  "keywords": [
    "wsfed",
    "saml",
    "auth"
  ],
  "author": {
    "name": "Auth0"
  },
  "license": "mit",
  "dependencies": {
    "saml": "~0.2.5",
    "ejs": "~0.8.3",
    "thumbprint": "0.0.1"
  },
  "devDependencies": {
    "chai": "~1.5.0",
    "express": "~3.1.0",
    "mocha": "~1.8.1",
    "request": "~2.14.0",
    "xmldom": "~0.1.13",
    "cheerio": "~0.10.7",
    "xml-crypto": "0.0.10",
    "xpath": "0.0.5",
    "xtend": "~2.0.3"
  },
  "readme": "WS Federation middleware for node.js.\n\n[![Build Status](https://travis-ci.org/auth0/node-wsfed.png)](https://travis-ci.org/auth0/node-wsfed)\n\n## Installation\n\n    npm install wsfed\n\n## Introduction\n\nThis middleware is meant to generate a valid WSFederation endpoint that talks saml.\n\nThe idea is that you will use another mechanism to valida the user first.\n\nThe endpoint supports metadata as well in the url ```/FederationMetadata/2007-06/FederationMetadata.xml```.\n\n## Usage\n\nOptions\n\n| Name                | Description                                      | Default                                      |\n| --------------------|:-------------------------------------------------| ---------------------------------------------|\n| cert                | public key used by this identity provider        | REQUIRED                                     |\n| key                 | private key used by this identity provider       | REQUIRED                                     |\n| callbackUrl         | the callback to post the token                   | REQUIRED                                     |\n| issuer              | the name of the issuer of the token              | REQUIRED                                     |\n| audience            | the audience for the saml token                  | req.query.wtrealm || req.query.wreply        |\n| getUserFromRequest  | how to extract the user information from request | function(req) { return req.user; }           |\n| profileMapper       | mapper to map users to claims (see PassportProfileMapper)| PassportProfileMapper |\n| signatureAlgorithm  | signature algorithm, options: rsa-sha1, rsa-sha256 | ```'rsa-sha256'``` |\n| digestAlgorithm     | digest algorithm, options: sha1, sha256          | ```'sha256'``` |\n| wctx                | state of the auth process                        | ```req.query.wctx``` |\n\n\nAdd the middleware as follows:\n\n~~~javascript\napp.get('/wsfed', wsfed.auth({\n  issuer:   'the-issuer',\n  callback: 'http://myapp/callback',\n  cert:     fs.readFileSync(path.join(__dirname, 'some-cert.pem')),\n  key:      fs.readFileSync(path.join(__dirname, 'some-cert.key')),\n}));\n~~~~\n\n## WsFederation Metadata\n\nwsfed can generate the metadata document for wsfederation as well. Usage as follows:\n\n~~~javascript\napp.get('/wsfed/FederationMetadata/2007-06/FederationMetadata.xml', wsfed.metadata({\n  issuer:   'the-issuer',\n  cert:     fs.readFileSync(path.join(__dirname, 'some-cert.pem')),\n}));\n~~~\n\nIt also accept two optionals parameters:\n\n-  profileMapper: a class implementing the profile mapper. This is used to render the claims type information (using the metadata property). See [PassportProfileMapper](https://github.com/auth0/node-wsfed/blob/master/lib/claims/PassportProfileMapper.js) for more information.\n-  endpointPath: this is the full path in your server to the auth route. By default the metadata handler uses the metadata request route without ```/FederationMetadata/2007..blabla.```\n\n## Example micro-adfs\n\nThis is a demostration how you can configure something as Active Directory Federation Services (ADFS) with few lines of code by assembling some components.\n\n\n~~~javascript\nvar express = require('express');\nvar http = require('http');\nvar wsfed = require('wsfed');\n\nvar serverSigning = {\n  cert:     fs.readFileSync(path.join(__dirname, 'wsfed.test-cert.pem')),\n  key:      fs.readFileSync(path.join(__dirname, 'wsfed.test-cert.key'))\n};\n\n//configure passport-windowsauth\nvar passport = require('passport');\nvar WindowsStrategy = require('passport-windowsauth');\n\npassport.use(new WindowsStrategy({ \n  ldap: {\n    url:             'ldap://wellscordoba.wellscordobabank.com/DC=wellscordobabank,DC=com',\n    base:            'DC=wellscordobabank,DC=com',\n    bindDN:          'someAccount',\n    bindCredentials: 'andItsPass'\n  }\n}, function(profile, done){\n  done(err, user);\n}));\n\nvar app = express();\n\napp.configure(function(){\n  this.use(express.cookieParser());\n  this.use(express.bodyParser());\n  this.use(express.session({ secret: 'keyboard cat' }));\n  this.use(passport.initialize());\n  this.use(passport.session());\n});\n\napp.get('/wsfed/FederationMetadata/2007-06/FederationMetadata.xml',\n  wsfed.metadata({\n    cert:   serverSigning.cert,\n    issuer: 'fixture-test'\n  }));\n\napp.get('/wsfed',   \n  passport.authenticate('WindowsAuthentication', { session: false }),\n  wsfed.auth({\n    issuer:      'fixture-test',\n    callbackUrl: 'http://office.google.com',\n    cert:        serverSigning.cert,\n    key:         serverSigning.key\n  }));\n\nvar server = http.createServer(app).listen(5050, callback);\n\n~~~\n\nNotice that since this use [passport-windowsauth](https://github.com/auth0/passport-windowsauth) it will only runs under IIS/IISNode. However you can use any Passport.js strategy to create a Ws-Federation server.  \n\n## License\n\nMIT - AUTH0 2013!",
  "_id": "wsfed@0.2.6",
  "_from": "wsfed@~0.2.6"
}
